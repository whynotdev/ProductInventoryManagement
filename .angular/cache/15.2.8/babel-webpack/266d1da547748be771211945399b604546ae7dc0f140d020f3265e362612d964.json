{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000';\n  }\n  login(email, password) {\n    return this.http.get(`${this.apiUrl}/users`).pipe(map(users => {\n      const user = users.find(u => u.email === email && u.password === password);\n      if (user) {\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        return true;\n      }\n      return false;\n    }));\n  }\n  logout() {\n    localStorage.removeItem('currentUser');\n  }\n  isLoggedIn() {\n    return !!localStorage.getItem('currentUser');\n  }\n  register(user) {\n    return this.http.post(`${this.apiUrl}/users`, user);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,uBAAuB;EAEA;EAExCC,KAAK,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAQ,GAAG,IAAI,CAACC,MAAM,QAAQ,CAAC,CAACC,IAAI,CACtDT,GAAG,CAAEU,KAAK,IAAI;MACZ,MAAMC,IAAI,GAAGD,KAAK,CAACE,IAAI,CACpBC,CAAM,IAAKA,CAAC,CAACR,KAAK,KAAKA,KAAK,IAAIQ,CAAC,CAACP,QAAQ,KAAKA,QAAQ,CACzD;MACD,IAAIK,IAAI,EAAE;QACRG,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,CAAC;QACzD,OAAO,IAAI;;MAEb,OAAO,KAAK;IACd,CAAC,CAAC,CACH;EACH;EAEAO,MAAM;IACJJ,YAAY,CAACK,UAAU,CAAC,aAAa,CAAC;EACxC;EAEAC,UAAU;IACR,OAAO,CAAC,CAACN,YAAY,CAACO,OAAO,CAAC,aAAa,CAAC;EAC9C;EAEAC,QAAQ,CAACX,IAAS;IAChB,OAAO,IAAI,CAACR,IAAI,CAACoB,IAAI,CAAC,GAAG,IAAI,CAACf,MAAM,QAAQ,EAAEG,IAAI,CAAC;EACrD;;AA9BWV,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAuB,SAAXvB,WAAW;EAAAwB,YAFV;AAAM","names":["map","AuthService","constructor","http","login","email","password","get","apiUrl","pipe","users","user","find","u","localStorage","setItem","JSON","stringify","logout","removeItem","isLoggedIn","getItem","register","post","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\whyno\\Desktop\\Final2025\\ProductInventoryManagement\\src\\app\\core\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private apiUrl = 'http://localhost:3000';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  login(email: string, password: string): Observable<boolean> {\r\n    return this.http.get<any[]>(`${this.apiUrl}/users`).pipe(\r\n      map((users) => {\r\n        const user = users.find(\r\n          (u: any) => u.email === email && u.password === password\r\n        );\r\n        if (user) {\r\n          localStorage.setItem('currentUser', JSON.stringify(user));\r\n          return true;\r\n        }\r\n        return false;\r\n      })\r\n    );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('currentUser');\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return !!localStorage.getItem('currentUser');\r\n  }\r\n\r\n  register(user: any): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/users`, user);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}